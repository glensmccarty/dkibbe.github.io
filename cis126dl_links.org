#+SETUPFILE: /home/dennisk/.emacs.d/org-templates/level-0.org
#+TITLE:     File Links
#+AUTHOR:    Dennis Kibbe
#+EMAIL:     dennis.kibbe@mesacc.edu
#+DATE:      2016-09-22 Thu
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:info toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP: http://dkibbe.github.io.indesx.html
#+LINK_HOME: http://dkibbe.github.io.indesx.htm
#+LINK: chain https://dkibbe.github.io/images/links_backup.png
#+LINK: chain https://dkibbe.github.io/images/links_chain.png
#+LINK: chain https://dkibbe.github.io/images/links_hard.png
#+LINK: chain https://dkibbe.github.io/images/links_soft.png
#+XSLT:

[[chain]]

* Links: Hard and Soft

  The =ln= command is used to create links or shortcuts between files and directories.

** Linux File Types

   When files are listed with =ls -l= the first character indicates what
type a file is.

There are seven basic types of file types in Linux.

| Symbol     | File Type          |
|------------+--------------------|
| - (dash)   | Ordinary file      |
| d          | Directory          |
| l          | Symbolic Link      |
| c          | Character Device   |
| b          | Block device       |
| s          | Local socket       |
| p          | Named pipe         |

The =ls= command is used to show information about a file.

#+BEGIN_EXAMPLE
$ touch foo
$    ls -l foo
-rwxrwxr-x 1 ubuntu ubuntu 0 Feb 13 2012 foo
#+END_EXAMPLE

The listing shows:

-  File type (-, d-, l, etc.)
-  User, Group, Other permissions
-  User ID and Group ID
-  Link counter
-  Size in bytes
-  Date last modified
-  File name

* Inode

  An inode points to where the data is on disk.

#+BEGIN_EXAMPLE
$ ls -il foo
16914416 -rwxrwxr-x 1 ubuntu ubuntu 0 Feb 13 2012 foo
#+END_EXAMPLE

As long as there is at least one pointer to the inode of a file the file is still accessible. When the pointer counter is zero the data is still
there but the file is not accessible.

The inode of the symbolic link is different from the file it points to. If the original file is deleted the link is broken.

#+BEGIN_EXAMPLE
$ ls -il /media/Debian/README.txt
1355 -r--r--r-- 1 dennisk dennisk 5512 Jun 15 16:06 /media/Debian/README.txt
#+END_EXAMPLE

* The =ln= command

Files with multiple pointers have multiple hard links to the same data.

The =ln= or link command is used to create multiple pointers to the
data.

#+BEGIN_EXAMPLE
$ ls -il foo
16914416 -rwxrwxr-x 1 ubuntu ubuntu 0 Feb 13 2012 foo
#+END_EXAMPLE

$ ln foo foobar

$ ls -il foobar* 16914416 -rwxrwxr-x 2 ubuntu ubuntu 0 Feb 13 2012
foobar 16914416 -rwxrwxr-x 2 ubuntu ubuntu 0 Feb 13 2012 foo

** Symbolic Links

   Symbolic or soft links can span file systems and can link to directories. Hard links can not.

#+BEGIN_EXAMPLE
$ ln -s /media/Debian/README.txt /home/dennisk
$ ls -il README.txt
16914528 lrwxrwxrwx 1 dennisk dennisk 38 Oct  2 13:53 README.txt -> /media/Debian 7.1.0 amd64 1/README.txt
#+END_EXAMPLE

** Hard Links

#+BEGIN_EXAMPLE
$ ls -il foobar*
16914416 -rwxrwxr-x 2 ubuntu ubuntu 401 Feb 13 2012 foobar
16914416 -rwxrwxr-x 2 ubuntu ubuntu 401 Feb 13 2012 foo
#+END_EXAMPLE

$ rm foo $ ls -il foobar 16914416 -rwxrwxr-x 1 ubuntu ubuntu 401 Feb 13
2012 foobar

*** Hard Links Limitations

    Hard links can not be made across file systems or to directories.

#+BEGIN_EXAMPLE
$ ln /media/Debian/README.txt /home/dennisk
ln: failed to create hard link 
./README.txt => /media/Debian/README.txt: Invalid cross-device link
#+END_EXAMPLE

$ ls -il /media/Debian/README.txt 1355 -r--r--r-- 1 dennisk dennisk 5512
Jun 15 16:06 /media/Debian/README.txt

*** Hard Links and Backups

    The files in blue are unchanged so a hard link in used to save disk space.

** What to Submit

   Change to the =/tmp= directory and create a file named =foo= with the =touch= command. Link =foobar= symbolically to =foo= and link =foo2= as a hard link to =foo=. Submit a screenshot of the =ls -li foo*= command showing that the inodes of =foo= and =foo2= are the same and that =foobar= is linked to =foo= and the inode numbers are not the same.

* Resources

- [[http://www.ibm.com/developerworks/aix/library/au-speakingunix14/][Speaking UNIX: It is all about the inode]]
- [[http://www.linux-mag.com/id/8658/][What's an inode?]]

